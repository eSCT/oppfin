// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.searchbox.domain;

import com.searchbox.domain.FieldFacetBean;
import com.searchbox.domain.facet.FieldFacet;
import com.searchbox.domain.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect FieldFacetBean_Roo_ManagedBean {
    
    declare @type: FieldFacetBean: @ManagedBean(name = "fieldFacetBean");
    
    declare @type: FieldFacetBean: @SessionScoped;
    
    private String FieldFacetBean.name = "FieldFacets";
    
    private FieldFacet FieldFacetBean.fieldFacet;
    
    private List<FieldFacet> FieldFacetBean.allFieldFacets;
    
    private boolean FieldFacetBean.dataVisible = false;
    
    private List<String> FieldFacetBean.columns;
    
    private HtmlPanelGrid FieldFacetBean.createPanelGrid;
    
    private HtmlPanelGrid FieldFacetBean.editPanelGrid;
    
    private HtmlPanelGrid FieldFacetBean.viewPanelGrid;
    
    private boolean FieldFacetBean.createDialogVisible = false;
    
    @PostConstruct
    public void FieldFacetBean.init() {
        columns = new ArrayList<String>();
        columns.add("label");
        columns.add("position");
        columns.add("fieldName");
    }
    
    public String FieldFacetBean.getName() {
        return name;
    }
    
    public List<String> FieldFacetBean.getColumns() {
        return columns;
    }
    
    public List<FieldFacet> FieldFacetBean.getAllFieldFacets() {
        return allFieldFacets;
    }
    
    public void FieldFacetBean.setAllFieldFacets(List<FieldFacet> allFieldFacets) {
        this.allFieldFacets = allFieldFacets;
    }
    
    public String FieldFacetBean.findAllFieldFacets() {
        allFieldFacets = FieldFacet.findAllFieldFacets();
        dataVisible = !allFieldFacets.isEmpty();
        return null;
    }
    
    public boolean FieldFacetBean.isDataVisible() {
        return dataVisible;
    }
    
    public void FieldFacetBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FieldFacetBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FieldFacetBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FieldFacetBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FieldFacetBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FieldFacetBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FieldFacetBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FieldFacetBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel labelCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelCreateOutput.setFor("labelCreateInput");
        labelCreateOutput.setId("labelCreateOutput");
        labelCreateOutput.setValue("Label:");
        htmlPanelGrid.getChildren().add(labelCreateOutput);
        
        InputText labelCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        labelCreateInput.setId("labelCreateInput");
        labelCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.label}", String.class));
        labelCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(labelCreateInput);
        
        Message labelCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelCreateInputMessage.setId("labelCreateInputMessage");
        labelCreateInputMessage.setFor("labelCreateInput");
        labelCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelCreateInputMessage);
        
        OutputLabel positionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        positionCreateOutput.setFor("positionCreateInput");
        positionCreateOutput.setId("positionCreateOutput");
        positionCreateOutput.setValue("Position:");
        htmlPanelGrid.getChildren().add(positionCreateOutput);
        
        Spinner positionCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        positionCreateInput.setId("positionCreateInput");
        positionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.position}", Integer.class));
        positionCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(positionCreateInput);
        
        Message positionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        positionCreateInputMessage.setId("positionCreateInputMessage");
        positionCreateInputMessage.setFor("positionCreateInput");
        positionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(positionCreateInputMessage);
        
        OutputLabel fieldNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fieldNameCreateOutput.setFor("fieldNameCreateInput");
        fieldNameCreateOutput.setId("fieldNameCreateOutput");
        fieldNameCreateOutput.setValue("Field Name:");
        htmlPanelGrid.getChildren().add(fieldNameCreateOutput);
        
        InputText fieldNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        fieldNameCreateInput.setId("fieldNameCreateInput");
        fieldNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.fieldName}", String.class));
        fieldNameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fieldNameCreateInput);
        
        Message fieldNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fieldNameCreateInputMessage.setId("fieldNameCreateInputMessage");
        fieldNameCreateInputMessage.setFor("fieldNameCreateInput");
        fieldNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fieldNameCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FieldFacetBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel labelEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelEditOutput.setFor("labelEditInput");
        labelEditOutput.setId("labelEditOutput");
        labelEditOutput.setValue("Label:");
        htmlPanelGrid.getChildren().add(labelEditOutput);
        
        InputText labelEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        labelEditInput.setId("labelEditInput");
        labelEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.label}", String.class));
        labelEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(labelEditInput);
        
        Message labelEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelEditInputMessage.setId("labelEditInputMessage");
        labelEditInputMessage.setFor("labelEditInput");
        labelEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelEditInputMessage);
        
        OutputLabel positionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        positionEditOutput.setFor("positionEditInput");
        positionEditOutput.setId("positionEditOutput");
        positionEditOutput.setValue("Position:");
        htmlPanelGrid.getChildren().add(positionEditOutput);
        
        Spinner positionEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        positionEditInput.setId("positionEditInput");
        positionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.position}", Integer.class));
        positionEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(positionEditInput);
        
        Message positionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        positionEditInputMessage.setId("positionEditInputMessage");
        positionEditInputMessage.setFor("positionEditInput");
        positionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(positionEditInputMessage);
        
        OutputLabel fieldNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fieldNameEditOutput.setFor("fieldNameEditInput");
        fieldNameEditOutput.setId("fieldNameEditOutput");
        fieldNameEditOutput.setValue("Field Name:");
        htmlPanelGrid.getChildren().add(fieldNameEditOutput);
        
        InputText fieldNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        fieldNameEditInput.setId("fieldNameEditInput");
        fieldNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.fieldName}", String.class));
        fieldNameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fieldNameEditInput);
        
        Message fieldNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fieldNameEditInputMessage.setId("fieldNameEditInputMessage");
        fieldNameEditInputMessage.setFor("fieldNameEditInput");
        fieldNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fieldNameEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FieldFacetBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText labelLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        labelLabel.setId("labelLabel");
        labelLabel.setValue("Label:");
        htmlPanelGrid.getChildren().add(labelLabel);
        
        HtmlOutputText labelValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        labelValue.setId("labelValue");
        labelValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.label}", String.class));
        htmlPanelGrid.getChildren().add(labelValue);
        
        HtmlOutputText positionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        positionLabel.setId("positionLabel");
        positionLabel.setValue("Position:");
        htmlPanelGrid.getChildren().add(positionLabel);
        
        HtmlOutputText positionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        positionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.position}", String.class));
        htmlPanelGrid.getChildren().add(positionValue);
        
        HtmlOutputText fieldNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fieldNameLabel.setId("fieldNameLabel");
        fieldNameLabel.setValue("Field Name:");
        htmlPanelGrid.getChildren().add(fieldNameLabel);
        
        HtmlOutputText fieldNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fieldNameValue.setId("fieldNameValue");
        fieldNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldFacetBean.fieldFacet.fieldName}", String.class));
        htmlPanelGrid.getChildren().add(fieldNameValue);
        
        return htmlPanelGrid;
    }
    
    public FieldFacet FieldFacetBean.getFieldFacet() {
        if (fieldFacet == null) {
            fieldFacet = new FieldFacet();
        }
        return fieldFacet;
    }
    
    public void FieldFacetBean.setFieldFacet(FieldFacet fieldFacet) {
        this.fieldFacet = fieldFacet;
    }
    
    public String FieldFacetBean.onEdit() {
        return null;
    }
    
    public boolean FieldFacetBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FieldFacetBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FieldFacetBean.displayList() {
        createDialogVisible = false;
        findAllFieldFacets();
        return "fieldFacet";
    }
    
    public String FieldFacetBean.displayCreateDialog() {
        fieldFacet = new FieldFacet();
        createDialogVisible = true;
        return "fieldFacet";
    }
    
    public String FieldFacetBean.persist() {
        String message = "";
        if (fieldFacet.getId() != null) {
            fieldFacet.merge();
            message = "message_successfully_updated";
        } else {
            fieldFacet.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "FieldFacet");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFieldFacets();
    }
    
    public String FieldFacetBean.delete() {
        fieldFacet.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "FieldFacet");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFieldFacets();
    }
    
    public void FieldFacetBean.reset() {
        fieldFacet = null;
        createDialogVisible = false;
    }
    
    public void FieldFacetBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
