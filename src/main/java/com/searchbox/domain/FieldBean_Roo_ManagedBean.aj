// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.searchbox.domain;

import com.searchbox.domain.Field;
import com.searchbox.domain.FieldBean;
import com.searchbox.domain.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect FieldBean_Roo_ManagedBean {
    
    declare @type: FieldBean: @ManagedBean(name = "fieldBean");
    
    declare @type: FieldBean: @SessionScoped;
    
    private String FieldBean.name = "Fields";
    
    private Field FieldBean.field;
    
    private List<Field> FieldBean.allFields;
    
    private boolean FieldBean.dataVisible = false;
    
    private List<String> FieldBean.columns;
    
    private HtmlPanelGrid FieldBean.createPanelGrid;
    
    private HtmlPanelGrid FieldBean.editPanelGrid;
    
    private HtmlPanelGrid FieldBean.viewPanelGrid;
    
    private boolean FieldBean.createDialogVisible = false;
    
    @PostConstruct
    public void FieldBean.init() {
        columns = new ArrayList<String>();
        columns.add("key");
        columns.add("label");
        columns.add("type");
        columns.add("weight");
    }
    
    public String FieldBean.getName() {
        return name;
    }
    
    public List<String> FieldBean.getColumns() {
        return columns;
    }
    
    public List<Field> FieldBean.getAllFields() {
        return allFields;
    }
    
    public void FieldBean.setAllFields(List<Field> allFields) {
        this.allFields = allFields;
    }
    
    public String FieldBean.findAllFields() {
        allFields = Field.findAllFields();
        dataVisible = !allFields.isEmpty();
        return null;
    }
    
    public boolean FieldBean.isDataVisible() {
        return dataVisible;
    }
    
    public void FieldBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FieldBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FieldBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FieldBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FieldBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FieldBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FieldBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FieldBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel keyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        keyCreateOutput.setFor("keyCreateInput");
        keyCreateOutput.setId("keyCreateOutput");
        keyCreateOutput.setValue("Key:");
        htmlPanelGrid.getChildren().add(keyCreateOutput);
        
        InputText keyCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        keyCreateInput.setId("keyCreateInput");
        keyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.key}", String.class));
        keyCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(keyCreateInput);
        
        Message keyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        keyCreateInputMessage.setId("keyCreateInputMessage");
        keyCreateInputMessage.setFor("keyCreateInput");
        keyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(keyCreateInputMessage);
        
        OutputLabel labelCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelCreateOutput.setFor("labelCreateInput");
        labelCreateOutput.setId("labelCreateOutput");
        labelCreateOutput.setValue("Label:");
        htmlPanelGrid.getChildren().add(labelCreateOutput);
        
        InputText labelCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        labelCreateInput.setId("labelCreateInput");
        labelCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.label}", String.class));
        labelCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(labelCreateInput);
        
        Message labelCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelCreateInputMessage.setId("labelCreateInputMessage");
        labelCreateInputMessage.setFor("labelCreateInput");
        labelCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelCreateInputMessage);
        
        OutputLabel searchableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        searchableCreateOutput.setFor("searchableCreateInput");
        searchableCreateOutput.setId("searchableCreateOutput");
        searchableCreateOutput.setValue("Searchable:");
        htmlPanelGrid.getChildren().add(searchableCreateOutput);
        
        SelectBooleanCheckbox searchableCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        searchableCreateInput.setId("searchableCreateInput");
        searchableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.searchable}", Boolean.class));
        searchableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(searchableCreateInput);
        
        Message searchableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        searchableCreateInputMessage.setId("searchableCreateInputMessage");
        searchableCreateInputMessage.setFor("searchableCreateInput");
        searchableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(searchableCreateInputMessage);
        
        OutputLabel sortableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sortableCreateOutput.setFor("sortableCreateInput");
        sortableCreateOutput.setId("sortableCreateOutput");
        sortableCreateOutput.setValue("Sortable:");
        htmlPanelGrid.getChildren().add(sortableCreateOutput);
        
        SelectBooleanCheckbox sortableCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        sortableCreateInput.setId("sortableCreateInput");
        sortableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.sortable}", Boolean.class));
        sortableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sortableCreateInput);
        
        Message sortableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sortableCreateInputMessage.setId("sortableCreateInputMessage");
        sortableCreateInputMessage.setFor("sortableCreateInput");
        sortableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sortableCreateInputMessage);
        
        OutputLabel spellableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        spellableCreateOutput.setFor("spellableCreateInput");
        spellableCreateOutput.setId("spellableCreateOutput");
        spellableCreateOutput.setValue("Spellable:");
        htmlPanelGrid.getChildren().add(spellableCreateOutput);
        
        SelectBooleanCheckbox spellableCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        spellableCreateInput.setId("spellableCreateInput");
        spellableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.spellable}", Boolean.class));
        spellableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(spellableCreateInput);
        
        Message spellableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        spellableCreateInputMessage.setId("spellableCreateInputMessage");
        spellableCreateInputMessage.setFor("spellableCreateInput");
        spellableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(spellableCreateInputMessage);
        
        OutputLabel typeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        typeCreateOutput.setFor("typeCreateInput");
        typeCreateOutput.setId("typeCreateOutput");
        typeCreateOutput.setValue("Type:");
        htmlPanelGrid.getChildren().add(typeCreateOutput);
        
        InputText typeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        typeCreateInput.setId("typeCreateInput");
        typeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.type}", String.class));
        typeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(typeCreateInput);
        
        Message typeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        typeCreateInputMessage.setId("typeCreateInputMessage");
        typeCreateInputMessage.setFor("typeCreateInput");
        typeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(typeCreateInputMessage);
        
        OutputLabel weightCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        weightCreateOutput.setFor("weightCreateInput");
        weightCreateOutput.setId("weightCreateOutput");
        weightCreateOutput.setValue("Weight:");
        htmlPanelGrid.getChildren().add(weightCreateOutput);
        
        InputText weightCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        weightCreateInput.setId("weightCreateInput");
        weightCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.weight}", Float.class));
        weightCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(weightCreateInput);
        
        Message weightCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        weightCreateInputMessage.setId("weightCreateInputMessage");
        weightCreateInputMessage.setFor("weightCreateInput");
        weightCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(weightCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FieldBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel keyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        keyEditOutput.setFor("keyEditInput");
        keyEditOutput.setId("keyEditOutput");
        keyEditOutput.setValue("Key:");
        htmlPanelGrid.getChildren().add(keyEditOutput);
        
        InputText keyEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        keyEditInput.setId("keyEditInput");
        keyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.key}", String.class));
        keyEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(keyEditInput);
        
        Message keyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        keyEditInputMessage.setId("keyEditInputMessage");
        keyEditInputMessage.setFor("keyEditInput");
        keyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(keyEditInputMessage);
        
        OutputLabel labelEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelEditOutput.setFor("labelEditInput");
        labelEditOutput.setId("labelEditOutput");
        labelEditOutput.setValue("Label:");
        htmlPanelGrid.getChildren().add(labelEditOutput);
        
        InputText labelEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        labelEditInput.setId("labelEditInput");
        labelEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.label}", String.class));
        labelEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(labelEditInput);
        
        Message labelEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelEditInputMessage.setId("labelEditInputMessage");
        labelEditInputMessage.setFor("labelEditInput");
        labelEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelEditInputMessage);
        
        OutputLabel searchableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        searchableEditOutput.setFor("searchableEditInput");
        searchableEditOutput.setId("searchableEditOutput");
        searchableEditOutput.setValue("Searchable:");
        htmlPanelGrid.getChildren().add(searchableEditOutput);
        
        SelectBooleanCheckbox searchableEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        searchableEditInput.setId("searchableEditInput");
        searchableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.searchable}", Boolean.class));
        searchableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(searchableEditInput);
        
        Message searchableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        searchableEditInputMessage.setId("searchableEditInputMessage");
        searchableEditInputMessage.setFor("searchableEditInput");
        searchableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(searchableEditInputMessage);
        
        OutputLabel sortableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sortableEditOutput.setFor("sortableEditInput");
        sortableEditOutput.setId("sortableEditOutput");
        sortableEditOutput.setValue("Sortable:");
        htmlPanelGrid.getChildren().add(sortableEditOutput);
        
        SelectBooleanCheckbox sortableEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        sortableEditInput.setId("sortableEditInput");
        sortableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.sortable}", Boolean.class));
        sortableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sortableEditInput);
        
        Message sortableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sortableEditInputMessage.setId("sortableEditInputMessage");
        sortableEditInputMessage.setFor("sortableEditInput");
        sortableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sortableEditInputMessage);
        
        OutputLabel spellableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        spellableEditOutput.setFor("spellableEditInput");
        spellableEditOutput.setId("spellableEditOutput");
        spellableEditOutput.setValue("Spellable:");
        htmlPanelGrid.getChildren().add(spellableEditOutput);
        
        SelectBooleanCheckbox spellableEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        spellableEditInput.setId("spellableEditInput");
        spellableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.spellable}", Boolean.class));
        spellableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(spellableEditInput);
        
        Message spellableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        spellableEditInputMessage.setId("spellableEditInputMessage");
        spellableEditInputMessage.setFor("spellableEditInput");
        spellableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(spellableEditInputMessage);
        
        OutputLabel typeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        typeEditOutput.setFor("typeEditInput");
        typeEditOutput.setId("typeEditOutput");
        typeEditOutput.setValue("Type:");
        htmlPanelGrid.getChildren().add(typeEditOutput);
        
        InputText typeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        typeEditInput.setId("typeEditInput");
        typeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.type}", String.class));
        typeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(typeEditInput);
        
        Message typeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        typeEditInputMessage.setId("typeEditInputMessage");
        typeEditInputMessage.setFor("typeEditInput");
        typeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(typeEditInputMessage);
        
        OutputLabel weightEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        weightEditOutput.setFor("weightEditInput");
        weightEditOutput.setId("weightEditOutput");
        weightEditOutput.setValue("Weight:");
        htmlPanelGrid.getChildren().add(weightEditOutput);
        
        InputText weightEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        weightEditInput.setId("weightEditInput");
        weightEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.weight}", Float.class));
        weightEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(weightEditInput);
        
        Message weightEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        weightEditInputMessage.setId("weightEditInputMessage");
        weightEditInputMessage.setFor("weightEditInput");
        weightEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(weightEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FieldBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText keyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        keyLabel.setId("keyLabel");
        keyLabel.setValue("Key:");
        htmlPanelGrid.getChildren().add(keyLabel);
        
        HtmlOutputText keyValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        keyValue.setId("keyValue");
        keyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.key}", String.class));
        htmlPanelGrid.getChildren().add(keyValue);
        
        HtmlOutputText labelLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        labelLabel.setId("labelLabel");
        labelLabel.setValue("Label:");
        htmlPanelGrid.getChildren().add(labelLabel);
        
        HtmlOutputText labelValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        labelValue.setId("labelValue");
        labelValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.label}", String.class));
        htmlPanelGrid.getChildren().add(labelValue);
        
        HtmlOutputText searchableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        searchableLabel.setId("searchableLabel");
        searchableLabel.setValue("Searchable:");
        htmlPanelGrid.getChildren().add(searchableLabel);
        
        HtmlOutputText searchableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        searchableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.searchable}", String.class));
        htmlPanelGrid.getChildren().add(searchableValue);
        
        HtmlOutputText sortableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sortableLabel.setId("sortableLabel");
        sortableLabel.setValue("Sortable:");
        htmlPanelGrid.getChildren().add(sortableLabel);
        
        HtmlOutputText sortableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sortableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.sortable}", String.class));
        htmlPanelGrid.getChildren().add(sortableValue);
        
        HtmlOutputText spellableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        spellableLabel.setId("spellableLabel");
        spellableLabel.setValue("Spellable:");
        htmlPanelGrid.getChildren().add(spellableLabel);
        
        HtmlOutputText spellableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        spellableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.spellable}", String.class));
        htmlPanelGrid.getChildren().add(spellableValue);
        
        HtmlOutputText typeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        typeLabel.setId("typeLabel");
        typeLabel.setValue("Type:");
        htmlPanelGrid.getChildren().add(typeLabel);
        
        HtmlOutputText typeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        typeValue.setId("typeValue");
        typeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.type}", String.class));
        htmlPanelGrid.getChildren().add(typeValue);
        
        HtmlOutputText weightLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        weightLabel.setId("weightLabel");
        weightLabel.setValue("Weight:");
        htmlPanelGrid.getChildren().add(weightLabel);
        
        HtmlOutputText weightValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        weightValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fieldBean.field.weight}", String.class));
        htmlPanelGrid.getChildren().add(weightValue);
        
        return htmlPanelGrid;
    }
    
    public Field FieldBean.getField() {
        if (field == null) {
            field = new Field();
        }
        return field;
    }
    
    public void FieldBean.setField(Field field) {
        this.field = field;
    }
    
    public String FieldBean.onEdit() {
        return null;
    }
    
    public boolean FieldBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FieldBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FieldBean.displayList() {
        createDialogVisible = false;
        findAllFields();
        return "field";
    }
    
    public String FieldBean.displayCreateDialog() {
        field = new Field();
        createDialogVisible = true;
        return "field";
    }
    
    public String FieldBean.persist() {
        String message = "";
        if (field.getId() != null) {
            field.merge();
            message = "message_successfully_updated";
        } else {
            field.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Field");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFields();
    }
    
    public String FieldBean.delete() {
        field.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Field");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFields();
    }
    
    public void FieldBean.reset() {
        field = null;
        createDialogVisible = false;
    }
    
    public void FieldBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
