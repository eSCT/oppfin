// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.searchbox.domain;

import com.searchbox.domain.SolrCollectionBean;
import com.searchbox.domain.collection.SolrCollection;
import com.searchbox.domain.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect SolrCollectionBean_Roo_ManagedBean {
    
    declare @type: SolrCollectionBean: @ManagedBean(name = "solrCollectionBean");
    
    declare @type: SolrCollectionBean: @SessionScoped;
    
    private String SolrCollectionBean.name = "SolrCollections";
    
    private SolrCollection SolrCollectionBean.solrCollection;
    
    private List<SolrCollection> SolrCollectionBean.allSolrCollections;
    
    private boolean SolrCollectionBean.dataVisible = false;
    
    private List<String> SolrCollectionBean.columns;
    
    private HtmlPanelGrid SolrCollectionBean.createPanelGrid;
    
    private HtmlPanelGrid SolrCollectionBean.editPanelGrid;
    
    private HtmlPanelGrid SolrCollectionBean.viewPanelGrid;
    
    private boolean SolrCollectionBean.createDialogVisible = false;
    
    @PostConstruct
    public void SolrCollectionBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("solrHost");
    }
    
    public String SolrCollectionBean.getName() {
        return name;
    }
    
    public List<String> SolrCollectionBean.getColumns() {
        return columns;
    }
    
    public List<SolrCollection> SolrCollectionBean.getAllSolrCollections() {
        return allSolrCollections;
    }
    
    public void SolrCollectionBean.setAllSolrCollections(List<SolrCollection> allSolrCollections) {
        this.allSolrCollections = allSolrCollections;
    }
    
    public String SolrCollectionBean.findAllSolrCollections() {
        allSolrCollections = SolrCollection.findAllSolrCollections();
        dataVisible = !allSolrCollections.isEmpty();
        return null;
    }
    
    public boolean SolrCollectionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void SolrCollectionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid SolrCollectionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void SolrCollectionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid SolrCollectionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void SolrCollectionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid SolrCollectionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void SolrCollectionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid SolrCollectionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{solrCollectionBean.solrCollection.name}", String.class));
        nameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel solrHostCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        solrHostCreateOutput.setFor("solrHostCreateInput");
        solrHostCreateOutput.setId("solrHostCreateOutput");
        solrHostCreateOutput.setValue("Solr Host:");
        htmlPanelGrid.getChildren().add(solrHostCreateOutput);
        
        InputText solrHostCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        solrHostCreateInput.setId("solrHostCreateInput");
        solrHostCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{solrCollectionBean.solrCollection.solrHost}", String.class));
        solrHostCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(solrHostCreateInput);
        
        Message solrHostCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        solrHostCreateInputMessage.setId("solrHostCreateInputMessage");
        solrHostCreateInputMessage.setFor("solrHostCreateInput");
        solrHostCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(solrHostCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SolrCollectionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{solrCollectionBean.solrCollection.name}", String.class));
        nameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel solrHostEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        solrHostEditOutput.setFor("solrHostEditInput");
        solrHostEditOutput.setId("solrHostEditOutput");
        solrHostEditOutput.setValue("Solr Host:");
        htmlPanelGrid.getChildren().add(solrHostEditOutput);
        
        InputText solrHostEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        solrHostEditInput.setId("solrHostEditInput");
        solrHostEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{solrCollectionBean.solrCollection.solrHost}", String.class));
        solrHostEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(solrHostEditInput);
        
        Message solrHostEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        solrHostEditInputMessage.setId("solrHostEditInputMessage");
        solrHostEditInputMessage.setFor("solrHostEditInput");
        solrHostEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(solrHostEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SolrCollectionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{solrCollectionBean.solrCollection.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText solrHostLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        solrHostLabel.setId("solrHostLabel");
        solrHostLabel.setValue("Solr Host:");
        htmlPanelGrid.getChildren().add(solrHostLabel);
        
        HtmlOutputText solrHostValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        solrHostValue.setId("solrHostValue");
        solrHostValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{solrCollectionBean.solrCollection.solrHost}", String.class));
        htmlPanelGrid.getChildren().add(solrHostValue);
        
        return htmlPanelGrid;
    }
    
    public SolrCollection SolrCollectionBean.getSolrCollection() {
        if (solrCollection == null) {
            solrCollection = new SolrCollection();
        }
        return solrCollection;
    }
    
    public void SolrCollectionBean.setSolrCollection(SolrCollection solrCollection) {
        this.solrCollection = solrCollection;
    }
    
    public String SolrCollectionBean.onEdit() {
        return null;
    }
    
    public boolean SolrCollectionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void SolrCollectionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String SolrCollectionBean.displayList() {
        createDialogVisible = false;
        findAllSolrCollections();
        return "solrCollection";
    }
    
    public String SolrCollectionBean.displayCreateDialog() {
        solrCollection = new SolrCollection();
        createDialogVisible = true;
        return "solrCollection";
    }
    
    public String SolrCollectionBean.persist() {
        String message = "";
        if (solrCollection.getId() != null) {
            solrCollection.merge();
            message = "message_successfully_updated";
        } else {
            solrCollection.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "SolrCollection");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSolrCollections();
    }
    
    public String SolrCollectionBean.delete() {
        solrCollection.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "SolrCollection");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSolrCollections();
    }
    
    public void SolrCollectionBean.reset() {
        solrCollection = null;
        createDialogVisible = false;
    }
    
    public void SolrCollectionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
