// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.searchbox.domain;

import com.searchbox.domain.Account;
import com.searchbox.domain.AccountBean;
import com.searchbox.domain.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect AccountBean_Roo_ManagedBean {
    
    declare @type: AccountBean: @ManagedBean(name = "accountBean");
    
    declare @type: AccountBean: @SessionScoped;
    
    private String AccountBean.name = "Accounts";
    
    private Account AccountBean.account;
    
    private List<Account> AccountBean.allAccounts;
    
    private boolean AccountBean.dataVisible = false;
    
    private List<String> AccountBean.columns;
    
    private HtmlPanelGrid AccountBean.createPanelGrid;
    
    private HtmlPanelGrid AccountBean.editPanelGrid;
    
    private HtmlPanelGrid AccountBean.viewPanelGrid;
    
    private boolean AccountBean.createDialogVisible = false;
    
    @PostConstruct
    public void AccountBean.init() {
        columns = new ArrayList<String>();
        columns.add("username");
        columns.add("email");
        columns.add("password");
        columns.add("fullName");
    }
    
    public String AccountBean.getName() {
        return name;
    }
    
    public List<String> AccountBean.getColumns() {
        return columns;
    }
    
    public List<Account> AccountBean.getAllAccounts() {
        return allAccounts;
    }
    
    public void AccountBean.setAllAccounts(List<Account> allAccounts) {
        this.allAccounts = allAccounts;
    }
    
    public String AccountBean.findAllAccounts() {
        allAccounts = Account.findAllAccounts();
        dataVisible = !allAccounts.isEmpty();
        return null;
    }
    
    public boolean AccountBean.isDataVisible() {
        return dataVisible;
    }
    
    public void AccountBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid AccountBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void AccountBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid AccountBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void AccountBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid AccountBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void AccountBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid AccountBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel usernameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        usernameCreateOutput.setFor("usernameCreateInput");
        usernameCreateOutput.setId("usernameCreateOutput");
        usernameCreateOutput.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameCreateOutput);
        
        InputText usernameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameCreateInput.setId("usernameCreateInput");
        usernameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.username}", String.class));
        usernameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(usernameCreateInput);
        
        Message usernameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameCreateInputMessage.setId("usernameCreateInputMessage");
        usernameCreateInputMessage.setFor("usernameCreateInput");
        usernameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameCreateInputMessage);
        
        OutputLabel emailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailCreateOutput.setFor("emailCreateInput");
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.email}", String.class));
        emailCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        OutputLabel passwordCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordCreateOutput.setFor("passwordCreateInput");
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputText passwordCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.password}", String.class));
        passwordCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        OutputLabel fullNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fullNameCreateOutput.setFor("fullNameCreateInput");
        fullNameCreateOutput.setId("fullNameCreateOutput");
        fullNameCreateOutput.setValue("Full Name:");
        htmlPanelGrid.getChildren().add(fullNameCreateOutput);
        
        InputText fullNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        fullNameCreateInput.setId("fullNameCreateInput");
        fullNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.fullName}", String.class));
        fullNameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fullNameCreateInput);
        
        Message fullNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fullNameCreateInputMessage.setId("fullNameCreateInputMessage");
        fullNameCreateInputMessage.setFor("fullNameCreateInput");
        fullNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fullNameCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid AccountBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel usernameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        usernameEditOutput.setFor("usernameEditInput");
        usernameEditOutput.setId("usernameEditOutput");
        usernameEditOutput.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameEditOutput);
        
        InputText usernameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameEditInput.setId("usernameEditInput");
        usernameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.username}", String.class));
        usernameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(usernameEditInput);
        
        Message usernameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameEditInputMessage.setId("usernameEditInputMessage");
        usernameEditInputMessage.setFor("usernameEditInput");
        usernameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameEditInputMessage);
        
        OutputLabel emailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailEditOutput.setFor("emailEditInput");
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.email}", String.class));
        emailEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        OutputLabel passwordEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordEditOutput.setFor("passwordEditInput");
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputText passwordEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.password}", String.class));
        passwordEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        OutputLabel fullNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fullNameEditOutput.setFor("fullNameEditInput");
        fullNameEditOutput.setId("fullNameEditOutput");
        fullNameEditOutput.setValue("Full Name:");
        htmlPanelGrid.getChildren().add(fullNameEditOutput);
        
        InputText fullNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        fullNameEditInput.setId("fullNameEditInput");
        fullNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.fullName}", String.class));
        fullNameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fullNameEditInput);
        
        Message fullNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fullNameEditInputMessage.setId("fullNameEditInputMessage");
        fullNameEditInputMessage.setFor("fullNameEditInput");
        fullNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fullNameEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid AccountBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usernameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameLabel.setId("usernameLabel");
        usernameLabel.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameLabel);
        
        HtmlOutputText usernameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameValue.setId("usernameValue");
        usernameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.username}", String.class));
        htmlPanelGrid.getChildren().add(usernameValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        HtmlOutputText passwordValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText fullNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fullNameLabel.setId("fullNameLabel");
        fullNameLabel.setValue("Full Name:");
        htmlPanelGrid.getChildren().add(fullNameLabel);
        
        HtmlOutputText fullNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fullNameValue.setId("fullNameValue");
        fullNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{accountBean.account.fullName}", String.class));
        htmlPanelGrid.getChildren().add(fullNameValue);
        
        return htmlPanelGrid;
    }
    
    public Account AccountBean.getAccount() {
        if (account == null) {
            account = new Account();
        }
        return account;
    }
    
    public void AccountBean.setAccount(Account account) {
        this.account = account;
    }
    
    public String AccountBean.onEdit() {
        return null;
    }
    
    public boolean AccountBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void AccountBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String AccountBean.displayList() {
        createDialogVisible = false;
        findAllAccounts();
        return "account";
    }
    
    public String AccountBean.displayCreateDialog() {
        account = new Account();
        createDialogVisible = true;
        return "account";
    }
    
    public String AccountBean.persist() {
        String message = "";
        if (account.getId() != null) {
            account.merge();
            message = "message_successfully_updated";
        } else {
            account.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Account");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAccounts();
    }
    
    public String AccountBean.delete() {
        account.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Account");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAccounts();
    }
    
    public void AccountBean.reset() {
        account = null;
        createDialogVisible = false;
    }
    
    public void AccountBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
